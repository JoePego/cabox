name: Flask App CI/CD

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch: # Allow manual triggering of the workflow

concurrency:
  group: "flask-deployment"
  cancel-in-progress: false

env:
  BUILD_NUMBER: 1
  BUILD_VERSION: 1.0.0
  PYTHON_VERSION: 3.9
  FLASK_APP: app.py
  SERVER_USER: your-server-user
  SERVER_HOST: your-server-ip-or-domain
  SERVER_PATH: /path/to/deploy/folder
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }} # Add SSH private key to GitHub Secrets for authentication

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python environment
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Install dependencies
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # Run the Flask app for testing
      - name: Run Flask app
        run: |
          python -m flask run --host=0.0.0.0 --port=8080 &
          sleep 10
          curl -f http://127.0.0.1:8080

  deploy:
    needs: build  # Deploy job depends on the build job

    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up SSH for server deployment
      - name: Set up SSH for server deployment
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Copy files to the server
      - name: Copy files to server
        run: |
          scp -r * ${SERVER_USER}@${SERVER_HOST}:${SERVER_PATH}

      # SSH into the server and restart the Flask app
      - name: SSH into server and restart Flask app
        run: |
          ssh -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_HOST} << 'EOF'
            cd ${SERVER_PATH}
            # Set up virtual environment and install dependencies
            python3 -m venv venv
            source venv/bin/activate
            pip install -r requirements.txt
            # Restart your Flask app (assuming you use a process manager like gunicorn)
            pkill -f gunicorn || true
            nohup gunicorn -b 0.0.0.0:5000 app:app &
          EOF
