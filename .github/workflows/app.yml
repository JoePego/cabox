name: Flask App Build + Deployment

on:
  # Runs on push to any of the below branches
  push:
    branches: 
      - master
      - main
  # Runs on pull request events that target one of the below branches
  pull_request:
    branches: 
      - master
      - main

  # Allows you to run this workflow manually from the Actions tab of the repository
  workflow_dispatch:

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "flask-deployment"
  cancel-in-progress: false

env:
  BUILD_NUMBER: 1
  BUILD_VERSION: 1.0.0
  PYTHON_VERSION: 3.9
  FLASK_APP: app.py
  SERVER_USER: your-server-user
  SERVER_HOST: your-server-ip-or-domain
  SERVER_PATH: /path/to/deploy/folder
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }} # Add SSH private key to GitHub Secrets for authentication

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

  deploy:
    needs: build  # wait for the "build" job to get done before executing this "deploy" job

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH for server deployment
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Copy files to server
        run: |
          # Copy files to the server using SCP
          scp -r * ${SERVER_USER}@${SERVER_HOST}:${SERVER_PATH}

      - name: SSH into server and restart Flask app
        run: |
          ssh -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_HOST} << 'EOF'
            cd ${SERVER_PATH}
            # Set up virtual environment and install dependencies
            python3 -m venv venv
            source venv/bin/activate
            pip install -r requirements.txt
            # Restart your Flask app (assuming you use a process manager like gunicorn)
            pkill -f gunicorn
            nohup gunicorn -b 0.0.0.0:5000 app:app &
          EOF
